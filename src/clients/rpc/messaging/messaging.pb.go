// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.19.0
// source: src/clients/rpc/messaging/messaging.proto

package messaging

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Conversations-------
type Conversation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uuid        *Uuid    `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty"`
	Type        int32    `protobuf:"varint,2,opt,name=type,proto3" json:"type,omitempty"`
	CreatedAt   float64  `protobuf:"fixed64,3,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	LastMsg     *Message `protobuf:"bytes,4,opt,name=last_msg,json=lastMsg,proto3" json:"last_msg,omitempty"`
	Name        string   `protobuf:"bytes,5,opt,name=name,proto3" json:"name,omitempty"`
	Description string   `protobuf:"bytes,6,opt,name=description,proto3" json:"description,omitempty"`
	AvatarUrl   string   `protobuf:"bytes,7,opt,name=avatar_url,json=avatarUrl,proto3" json:"avatar_url,omitempty"`
}

func (x *Conversation) Reset() {
	*x = Conversation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_src_clients_rpc_messaging_messaging_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Conversation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Conversation) ProtoMessage() {}

func (x *Conversation) ProtoReflect() protoreflect.Message {
	mi := &file_src_clients_rpc_messaging_messaging_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Conversation.ProtoReflect.Descriptor instead.
func (*Conversation) Descriptor() ([]byte, []int) {
	return file_src_clients_rpc_messaging_messaging_proto_rawDescGZIP(), []int{0}
}

func (x *Conversation) GetUuid() *Uuid {
	if x != nil {
		return x.Uuid
	}
	return nil
}

func (x *Conversation) GetType() int32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *Conversation) GetCreatedAt() float64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *Conversation) GetLastMsg() *Message {
	if x != nil {
		return x.LastMsg
	}
	return nil
}

func (x *Conversation) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Conversation) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Conversation) GetAvatarUrl() string {
	if x != nil {
		return x.AvatarUrl
	}
	return ""
}

type UserConversation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uuid           *Uuid   `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty"`
	UserUuid       *Uuid   `protobuf:"bytes,2,opt,name=user_uuid,json=userUuid,proto3" json:"user_uuid,omitempty"`
	LastAccessUuid *Uuid   `protobuf:"bytes,4,opt,name=last_access_uuid,json=lastAccessUuid,proto3" json:"last_access_uuid,omitempty"`
	CreatedAt      float64 `protobuf:"fixed64,5,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
}

func (x *UserConversation) Reset() {
	*x = UserConversation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_src_clients_rpc_messaging_messaging_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserConversation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserConversation) ProtoMessage() {}

func (x *UserConversation) ProtoReflect() protoreflect.Message {
	mi := &file_src_clients_rpc_messaging_messaging_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserConversation.ProtoReflect.Descriptor instead.
func (*UserConversation) Descriptor() ([]byte, []int) {
	return file_src_clients_rpc_messaging_messaging_proto_rawDescGZIP(), []int{1}
}

func (x *UserConversation) GetUuid() *Uuid {
	if x != nil {
		return x.Uuid
	}
	return nil
}

func (x *UserConversation) GetUserUuid() *Uuid {
	if x != nil {
		return x.UserUuid
	}
	return nil
}

func (x *UserConversation) GetLastAccessUuid() *Uuid {
	if x != nil {
		return x.LastAccessUuid
	}
	return nil
}

func (x *UserConversation) GetCreatedAt() float64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

type ConversationAndParticipants struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Conversation     *Conversation       `protobuf:"bytes,1,opt,name=conversation,proto3" json:"conversation,omitempty"`
	UserConversation *UserConversation   `protobuf:"bytes,2,opt,name=user_conversation,json=userConversation,proto3" json:"user_conversation,omitempty"`
	Participants     []*UserConversation `protobuf:"bytes,3,rep,name=participants,proto3" json:"participants,omitempty"`
	UnreadMessages   int32               `protobuf:"varint,4,opt,name=unread_messages,json=unreadMessages,proto3" json:"unread_messages,omitempty"`
}

func (x *ConversationAndParticipants) Reset() {
	*x = ConversationAndParticipants{}
	if protoimpl.UnsafeEnabled {
		mi := &file_src_clients_rpc_messaging_messaging_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConversationAndParticipants) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConversationAndParticipants) ProtoMessage() {}

func (x *ConversationAndParticipants) ProtoReflect() protoreflect.Message {
	mi := &file_src_clients_rpc_messaging_messaging_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConversationAndParticipants.ProtoReflect.Descriptor instead.
func (*ConversationAndParticipants) Descriptor() ([]byte, []int) {
	return file_src_clients_rpc_messaging_messaging_proto_rawDescGZIP(), []int{2}
}

func (x *ConversationAndParticipants) GetConversation() *Conversation {
	if x != nil {
		return x.Conversation
	}
	return nil
}

func (x *ConversationAndParticipants) GetUserConversation() *UserConversation {
	if x != nil {
		return x.UserConversation
	}
	return nil
}

func (x *ConversationAndParticipants) GetParticipants() []*UserConversation {
	if x != nil {
		return x.Participants
	}
	return nil
}

func (x *ConversationAndParticipants) GetUnreadMessages() int32 {
	if x != nil {
		return x.UnreadMessages
	}
	return 0
}

type UpdateConversationResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Conversation *Conversation `protobuf:"bytes,1,opt,name=conversation,proto3" json:"conversation,omitempty"`
	Msg          *SvrMsg       `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
}

func (x *UpdateConversationResponse) Reset() {
	*x = UpdateConversationResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_src_clients_rpc_messaging_messaging_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateConversationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateConversationResponse) ProtoMessage() {}

func (x *UpdateConversationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_src_clients_rpc_messaging_messaging_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateConversationResponse.ProtoReflect.Descriptor instead.
func (*UpdateConversationResponse) Descriptor() ([]byte, []int) {
	return file_src_clients_rpc_messaging_messaging_proto_rawDescGZIP(), []int{3}
}

func (x *UpdateConversationResponse) GetConversation() *Conversation {
	if x != nil {
		return x.Conversation
	}
	return nil
}

func (x *UpdateConversationResponse) GetMsg() *SvrMsg {
	if x != nil {
		return x.Msg
	}
	return nil
}

type ArrayConversationResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Conversations []*ConversationAndParticipants `protobuf:"bytes,1,rep,name=conversations,proto3" json:"conversations,omitempty"`
	Msg           *SvrMsg                        `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
}

func (x *ArrayConversationResponse) Reset() {
	*x = ArrayConversationResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_src_clients_rpc_messaging_messaging_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ArrayConversationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ArrayConversationResponse) ProtoMessage() {}

func (x *ArrayConversationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_src_clients_rpc_messaging_messaging_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ArrayConversationResponse.ProtoReflect.Descriptor instead.
func (*ArrayConversationResponse) Descriptor() ([]byte, []int) {
	return file_src_clients_rpc_messaging_messaging_proto_rawDescGZIP(), []int{4}
}

func (x *ArrayConversationResponse) GetConversations() []*ConversationAndParticipants {
	if x != nil {
		return x.Conversations
	}
	return nil
}

func (x *ArrayConversationResponse) GetMsg() *SvrMsg {
	if x != nil {
		return x.Msg
	}
	return nil
}

type CreateUserConversationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ConversationUuid  *Uuid               `protobuf:"bytes,1,opt,name=conversation_uuid,json=conversationUuid,proto3" json:"conversation_uuid,omitempty"`
	UserConversations []*UserConversation `protobuf:"bytes,2,rep,name=user_conversations,json=userConversations,proto3" json:"user_conversations,omitempty"`
}

func (x *CreateUserConversationRequest) Reset() {
	*x = CreateUserConversationRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_src_clients_rpc_messaging_messaging_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateUserConversationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateUserConversationRequest) ProtoMessage() {}

func (x *CreateUserConversationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_src_clients_rpc_messaging_messaging_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateUserConversationRequest.ProtoReflect.Descriptor instead.
func (*CreateUserConversationRequest) Descriptor() ([]byte, []int) {
	return file_src_clients_rpc_messaging_messaging_proto_rawDescGZIP(), []int{5}
}

func (x *CreateUserConversationRequest) GetConversationUuid() *Uuid {
	if x != nil {
		return x.ConversationUuid
	}
	return nil
}

func (x *CreateUserConversationRequest) GetUserConversations() []*UserConversation {
	if x != nil {
		return x.UserConversations
	}
	return nil
}

type KickUserRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserConversation *Uuid `protobuf:"bytes,1,opt,name=user_conversation,json=userConversation,proto3" json:"user_conversation,omitempty"`
	Conversation     *Uuid `protobuf:"bytes,2,opt,name=conversation,proto3" json:"conversation,omitempty"`
}

func (x *KickUserRequest) Reset() {
	*x = KickUserRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_src_clients_rpc_messaging_messaging_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KickUserRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KickUserRequest) ProtoMessage() {}

func (x *KickUserRequest) ProtoReflect() protoreflect.Message {
	mi := &file_src_clients_rpc_messaging_messaging_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KickUserRequest.ProtoReflect.Descriptor instead.
func (*KickUserRequest) Descriptor() ([]byte, []int) {
	return file_src_clients_rpc_messaging_messaging_proto_rawDescGZIP(), []int{6}
}

func (x *KickUserRequest) GetUserConversation() *Uuid {
	if x != nil {
		return x.UserConversation
	}
	return nil
}

func (x *KickUserRequest) GetConversation() *Uuid {
	if x != nil {
		return x.Conversation
	}
	return nil
}

// ----------
// Messages
type Message struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uuid             *Uuid   `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty"`
	ConversationUuid *Uuid   `protobuf:"bytes,2,opt,name=conversation_uuid,json=conversationUuid,proto3" json:"conversation_uuid,omitempty"`
	AuthorUuid       *Uuid   `protobuf:"bytes,3,opt,name=author_uuid,json=authorUuid,proto3" json:"author_uuid,omitempty"`
	Text             string  `protobuf:"bytes,4,opt,name=text,proto3" json:"text,omitempty"`
	CreatedAt        float64 `protobuf:"fixed64,5,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt        float64 `protobuf:"fixed64,6,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
}

func (x *Message) Reset() {
	*x = Message{}
	if protoimpl.UnsafeEnabled {
		mi := &file_src_clients_rpc_messaging_messaging_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Message) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Message) ProtoMessage() {}

func (x *Message) ProtoReflect() protoreflect.Message {
	mi := &file_src_clients_rpc_messaging_messaging_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Message.ProtoReflect.Descriptor instead.
func (*Message) Descriptor() ([]byte, []int) {
	return file_src_clients_rpc_messaging_messaging_proto_rawDescGZIP(), []int{7}
}

func (x *Message) GetUuid() *Uuid {
	if x != nil {
		return x.Uuid
	}
	return nil
}

func (x *Message) GetConversationUuid() *Uuid {
	if x != nil {
		return x.ConversationUuid
	}
	return nil
}

func (x *Message) GetAuthorUuid() *Uuid {
	if x != nil {
		return x.AuthorUuid
	}
	return nil
}

func (x *Message) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

func (x *Message) GetCreatedAt() float64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *Message) GetUpdatedAt() float64 {
	if x != nil {
		return x.UpdatedAt
	}
	return 0
}

type CreateMessageRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message            *Message                     `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	CreateConversation bool                         `protobuf:"varint,3,opt,name=create_conversation,json=createConversation,proto3" json:"create_conversation,omitempty"`
	NewConvo           *ConversationAndParticipants `protobuf:"bytes,4,opt,name=new_convo,json=newConvo,proto3" json:"new_convo,omitempty"`
}

func (x *CreateMessageRequest) Reset() {
	*x = CreateMessageRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_src_clients_rpc_messaging_messaging_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateMessageRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateMessageRequest) ProtoMessage() {}

func (x *CreateMessageRequest) ProtoReflect() protoreflect.Message {
	mi := &file_src_clients_rpc_messaging_messaging_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateMessageRequest.ProtoReflect.Descriptor instead.
func (*CreateMessageRequest) Descriptor() ([]byte, []int) {
	return file_src_clients_rpc_messaging_messaging_proto_rawDescGZIP(), []int{8}
}

func (x *CreateMessageRequest) GetMessage() *Message {
	if x != nil {
		return x.Message
	}
	return nil
}

func (x *CreateMessageRequest) GetCreateConversation() bool {
	if x != nil {
		return x.CreateConversation
	}
	return false
}

func (x *CreateMessageRequest) GetNewConvo() *ConversationAndParticipants {
	if x != nil {
		return x.NewConvo
	}
	return nil
}

type MessageMsgResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message *Message `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	Msg     *SvrMsg  `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
}

func (x *MessageMsgResponse) Reset() {
	*x = MessageMsgResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_src_clients_rpc_messaging_messaging_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MessageMsgResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MessageMsgResponse) ProtoMessage() {}

func (x *MessageMsgResponse) ProtoReflect() protoreflect.Message {
	mi := &file_src_clients_rpc_messaging_messaging_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MessageMsgResponse.ProtoReflect.Descriptor instead.
func (*MessageMsgResponse) Descriptor() ([]byte, []int) {
	return file_src_clients_rpc_messaging_messaging_proto_rawDescGZIP(), []int{9}
}

func (x *MessageMsgResponse) GetMessage() *Message {
	if x != nil {
		return x.Message
	}
	return nil
}

func (x *MessageMsgResponse) GetMsg() *SvrMsg {
	if x != nil {
		return x.Msg
	}
	return nil
}

type ArrayMessageResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message []*Message `protobuf:"bytes,1,rep,name=message,proto3" json:"message,omitempty"`
	Msg     *SvrMsg    `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
}

func (x *ArrayMessageResponse) Reset() {
	*x = ArrayMessageResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_src_clients_rpc_messaging_messaging_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ArrayMessageResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ArrayMessageResponse) ProtoMessage() {}

func (x *ArrayMessageResponse) ProtoReflect() protoreflect.Message {
	mi := &file_src_clients_rpc_messaging_messaging_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ArrayMessageResponse.ProtoReflect.Descriptor instead.
func (*ArrayMessageResponse) Descriptor() ([]byte, []int) {
	return file_src_clients_rpc_messaging_messaging_proto_rawDescGZIP(), []int{10}
}

func (x *ArrayMessageResponse) GetMessage() []*Message {
	if x != nil {
		return x.Message
	}
	return nil
}

func (x *ArrayMessageResponse) GetMsg() *SvrMsg {
	if x != nil {
		return x.Msg
	}
	return nil
}

type GetMessages struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uuid       *Uuid   `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty"`
	BeforeDate float64 `protobuf:"fixed64,2,opt,name=before_date,json=beforeDate,proto3" json:"before_date,omitempty"`
	AfterDate  float64 `protobuf:"fixed64,3,opt,name=after_date,json=afterDate,proto3" json:"after_date,omitempty"`
}

func (x *GetMessages) Reset() {
	*x = GetMessages{}
	if protoimpl.UnsafeEnabled {
		mi := &file_src_clients_rpc_messaging_messaging_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetMessages) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMessages) ProtoMessage() {}

func (x *GetMessages) ProtoReflect() protoreflect.Message {
	mi := &file_src_clients_rpc_messaging_messaging_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMessages.ProtoReflect.Descriptor instead.
func (*GetMessages) Descriptor() ([]byte, []int) {
	return file_src_clients_rpc_messaging_messaging_proto_rawDescGZIP(), []int{11}
}

func (x *GetMessages) GetUuid() *Uuid {
	if x != nil {
		return x.Uuid
	}
	return nil
}

func (x *GetMessages) GetBeforeDate() float64 {
	if x != nil {
		return x.BeforeDate
	}
	return 0
}

func (x *GetMessages) GetAfterDate() float64 {
	if x != nil {
		return x.AfterDate
	}
	return 0
}

//----
//other
type Uuid struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uuid string `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty"`
}

func (x *Uuid) Reset() {
	*x = Uuid{}
	if protoimpl.UnsafeEnabled {
		mi := &file_src_clients_rpc_messaging_messaging_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Uuid) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Uuid) ProtoMessage() {}

func (x *Uuid) ProtoReflect() protoreflect.Message {
	mi := &file_src_clients_rpc_messaging_messaging_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Uuid.ProtoReflect.Descriptor instead.
func (*Uuid) Descriptor() ([]byte, []int) {
	return file_src_clients_rpc_messaging_messaging_proto_rawDescGZIP(), []int{12}
}

func (x *Uuid) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

type SvrMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status  int64  `protobuf:"varint,1,opt,name=status,proto3" json:"status,omitempty"`
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *SvrMsg) Reset() {
	*x = SvrMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_src_clients_rpc_messaging_messaging_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SvrMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SvrMsg) ProtoMessage() {}

func (x *SvrMsg) ProtoReflect() protoreflect.Message {
	mi := &file_src_clients_rpc_messaging_messaging_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SvrMsg.ProtoReflect.Descriptor instead.
func (*SvrMsg) Descriptor() ([]byte, []int) {
	return file_src_clients_rpc_messaging_messaging_proto_rawDescGZIP(), []int{13}
}

func (x *SvrMsg) GetStatus() int64 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *SvrMsg) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type UuidMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uuid *Uuid   `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty"`
	Msg  *SvrMsg `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
}

func (x *UuidMsg) Reset() {
	*x = UuidMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_src_clients_rpc_messaging_messaging_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UuidMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UuidMsg) ProtoMessage() {}

func (x *UuidMsg) ProtoReflect() protoreflect.Message {
	mi := &file_src_clients_rpc_messaging_messaging_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UuidMsg.ProtoReflect.Descriptor instead.
func (*UuidMsg) Descriptor() ([]byte, []int) {
	return file_src_clients_rpc_messaging_messaging_proto_rawDescGZIP(), []int{14}
}

func (x *UuidMsg) GetUuid() *Uuid {
	if x != nil {
		return x.Uuid
	}
	return nil
}

func (x *UuidMsg) GetMsg() *SvrMsg {
	if x != nil {
		return x.Msg
	}
	return nil
}

var File_src_clients_rpc_messaging_messaging_proto protoreflect.FileDescriptor

var file_src_clients_rpc_messaging_messaging_proto_rawDesc = []byte{
	0x0a, 0x29, 0x73, 0x72, 0x63, 0x2f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x72, 0x70,
	0x63, 0x2f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x2f, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x69, 0x6e, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x1a, 0x66, 0x6c, 0x79,
	0x64, 0x65, 0x76, 0x73, 0x5f, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x22, 0x8c, 0x02, 0x0a, 0x0c, 0x43, 0x6f, 0x6e, 0x76,
	0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x34, 0x0a, 0x04, 0x75, 0x75, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x66, 0x6c, 0x79, 0x64, 0x65, 0x76, 0x73,
	0x5f, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x69, 0x6e, 0x67, 0x2e, 0x55, 0x75, 0x69, 0x64, 0x52, 0x04, 0x75, 0x75, 0x69, 0x64, 0x12, 0x12,
	0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41,
	0x74, 0x12, 0x3e, 0x0a, 0x08, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x6d, 0x73, 0x67, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x66, 0x6c, 0x79, 0x64, 0x65, 0x76, 0x73, 0x5f, 0x63, 0x68,
	0x61, 0x74, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x69, 0x6e, 0x67,
	0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x07, 0x6c, 0x61, 0x73, 0x74, 0x4d, 0x73,
	0x67, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x76, 0x61, 0x74, 0x61,
	0x72, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x76, 0x61,
	0x74, 0x61, 0x72, 0x55, 0x72, 0x6c, 0x22, 0xf2, 0x01, 0x0a, 0x10, 0x55, 0x73, 0x65, 0x72, 0x43,
	0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x34, 0x0a, 0x04, 0x75,
	0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x66, 0x6c, 0x79, 0x64,
	0x65, 0x76, 0x73, 0x5f, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x2e, 0x55, 0x75, 0x69, 0x64, 0x52, 0x04, 0x75, 0x75, 0x69,
	0x64, 0x12, 0x3d, 0x0a, 0x09, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x66, 0x6c, 0x79, 0x64, 0x65, 0x76, 0x73, 0x5f, 0x63,
	0x68, 0x61, 0x74, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x69, 0x6e,
	0x67, 0x2e, 0x55, 0x75, 0x69, 0x64, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x55, 0x75, 0x69, 0x64,
	0x12, 0x4a, 0x0a, 0x10, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f,
	0x75, 0x75, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x66, 0x6c, 0x79,
	0x64, 0x65, 0x76, 0x73, 0x5f, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x2e, 0x55, 0x75, 0x69, 0x64, 0x52, 0x0e, 0x6c, 0x61,
	0x73, 0x74, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x55, 0x75, 0x69, 0x64, 0x12, 0x1d, 0x0a, 0x0a,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x22, 0xc1, 0x02, 0x0a, 0x1b,
	0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x6e, 0x64, 0x50,
	0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x73, 0x12, 0x4c, 0x0a, 0x0c, 0x63,
	0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x28, 0x2e, 0x66, 0x6c, 0x79, 0x64, 0x65, 0x76, 0x73, 0x5f, 0x63, 0x68, 0x61, 0x74,
	0x5f, 0x61, 0x70, 0x70, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x2e, 0x43,
	0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0c, 0x63, 0x6f, 0x6e,
	0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x59, 0x0a, 0x11, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x66, 0x6c, 0x79, 0x64, 0x65, 0x76, 0x73, 0x5f, 0x63,
	0x68, 0x61, 0x74, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x69, 0x6e,
	0x67, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x10, 0x75, 0x73, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x50, 0x0a, 0x0c, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70,
	0x61, 0x6e, 0x74, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x66, 0x6c, 0x79,
	0x64, 0x65, 0x76, 0x73, 0x5f, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x76,
	0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0c, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63,
	0x69, 0x70, 0x61, 0x6e, 0x74, 0x73, 0x12, 0x27, 0x0a, 0x0f, 0x75, 0x6e, 0x72, 0x65, 0x61, 0x64,
	0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0e, 0x75, 0x6e, 0x72, 0x65, 0x61, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x22,
	0xa0, 0x01, 0x0a, 0x1a, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72,
	0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4c,
	0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x66, 0x6c, 0x79, 0x64, 0x65, 0x76, 0x73, 0x5f, 0x63,
	0x68, 0x61, 0x74, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x69, 0x6e,
	0x67, 0x2e, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0c,
	0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x34, 0x0a, 0x03,
	0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x66, 0x6c, 0x79, 0x64,
	0x65, 0x76, 0x73, 0x5f, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x2e, 0x53, 0x76, 0x72, 0x4d, 0x73, 0x67, 0x52, 0x03, 0x6d,
	0x73, 0x67, 0x22, 0xb0, 0x01, 0x0a, 0x19, 0x41, 0x72, 0x72, 0x61, 0x79, 0x43, 0x6f, 0x6e, 0x76,
	0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x5d, 0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x66, 0x6c, 0x79, 0x64, 0x65, 0x76,
	0x73, 0x5f, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x69, 0x6e, 0x67, 0x2e, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x41, 0x6e, 0x64, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x73,
	0x52, 0x0d, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12,
	0x34, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x66,
	0x6c, 0x79, 0x64, 0x65, 0x76, 0x73, 0x5f, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x61, 0x70, 0x70, 0x5f,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x2e, 0x53, 0x76, 0x72, 0x4d, 0x73, 0x67,
	0x52, 0x03, 0x6d, 0x73, 0x67, 0x22, 0xcb, 0x01, 0x0a, 0x1d, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x55, 0x73, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x4d, 0x0a, 0x11, 0x63, 0x6f, 0x6e, 0x76, 0x65,
	0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x20, 0x2e, 0x66, 0x6c, 0x79, 0x64, 0x65, 0x76, 0x73, 0x5f, 0x63, 0x68, 0x61,
	0x74, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x2e,
	0x55, 0x75, 0x69, 0x64, 0x52, 0x10, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x55, 0x75, 0x69, 0x64, 0x12, 0x5b, 0x0a, 0x12, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x63,
	0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x66, 0x6c, 0x79, 0x64, 0x65, 0x76, 0x73, 0x5f, 0x63, 0x68, 0x61,
	0x74, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x2e,
	0x55, 0x73, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x11, 0x75, 0x73, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x22, 0xa6, 0x01, 0x0a, 0x0f, 0x4b, 0x69, 0x63, 0x6b, 0x55, 0x73, 0x65, 0x72,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x4d, 0x0a, 0x11, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x20, 0x2e, 0x66, 0x6c, 0x79, 0x64, 0x65, 0x76, 0x73, 0x5f, 0x63, 0x68, 0x61,
	0x74, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x2e,
	0x55, 0x75, 0x69, 0x64, 0x52, 0x10, 0x75, 0x73, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72,
	0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x44, 0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72,
	0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x66,
	0x6c, 0x79, 0x64, 0x65, 0x76, 0x73, 0x5f, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x61, 0x70, 0x70, 0x5f,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x2e, 0x55, 0x75, 0x69, 0x64, 0x52, 0x0c,
	0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xa3, 0x02, 0x0a,
	0x07, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x34, 0x0a, 0x04, 0x75, 0x75, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x66, 0x6c, 0x79, 0x64, 0x65, 0x76, 0x73,
	0x5f, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x69, 0x6e, 0x67, 0x2e, 0x55, 0x75, 0x69, 0x64, 0x52, 0x04, 0x75, 0x75, 0x69, 0x64, 0x12, 0x4d,
	0x0a, 0x11, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x75,
	0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x66, 0x6c, 0x79, 0x64,
	0x65, 0x76, 0x73, 0x5f, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x2e, 0x55, 0x75, 0x69, 0x64, 0x52, 0x10, 0x63, 0x6f, 0x6e,
	0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x75, 0x69, 0x64, 0x12, 0x41, 0x0a,
	0x0b, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x20, 0x2e, 0x66, 0x6c, 0x79, 0x64, 0x65, 0x76, 0x73, 0x5f, 0x63, 0x68, 0x61,
	0x74, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x2e,
	0x55, 0x75, 0x69, 0x64, 0x52, 0x0a, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x55, 0x75, 0x69, 0x64,
	0x12, 0x12, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x74, 0x65, 0x78, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f,
	0x61, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x41, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61,
	0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64,
	0x41, 0x74, 0x22, 0xdc, 0x01, 0x0a, 0x14, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3d, 0x0a, 0x07, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x66,
	0x6c, 0x79, 0x64, 0x65, 0x76, 0x73, 0x5f, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x61, 0x70, 0x70, 0x5f,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x2f, 0x0a, 0x13, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43,
	0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x54, 0x0a, 0x09, 0x6e,
	0x65, 0x77, 0x5f, 0x63, 0x6f, 0x6e, 0x76, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x37,
	0x2e, 0x66, 0x6c, 0x79, 0x64, 0x65, 0x76, 0x73, 0x5f, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x61, 0x70,
	0x70, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x2e, 0x43, 0x6f, 0x6e, 0x76,
	0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x6e, 0x64, 0x50, 0x61, 0x72, 0x74, 0x69,
	0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x73, 0x52, 0x08, 0x6e, 0x65, 0x77, 0x43, 0x6f, 0x6e, 0x76,
	0x6f, 0x22, 0x89, 0x01, 0x0a, 0x12, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x4d, 0x73, 0x67,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3d, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x66, 0x6c, 0x79, 0x64,
	0x65, 0x76, 0x73, 0x5f, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x07,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x34, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x66, 0x6c, 0x79, 0x64, 0x65, 0x76, 0x73, 0x5f, 0x63,
	0x68, 0x61, 0x74, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x69, 0x6e,
	0x67, 0x2e, 0x53, 0x76, 0x72, 0x4d, 0x73, 0x67, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x22, 0x8b, 0x01,
	0x0a, 0x14, 0x41, 0x72, 0x72, 0x61, 0x79, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3d, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x66, 0x6c, 0x79, 0x64, 0x65, 0x76,
	0x73, 0x5f, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x69, 0x6e, 0x67, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x07, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x34, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x22, 0x2e, 0x66, 0x6c, 0x79, 0x64, 0x65, 0x76, 0x73, 0x5f, 0x63, 0x68, 0x61,
	0x74, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x2e,
	0x53, 0x76, 0x72, 0x4d, 0x73, 0x67, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x22, 0x83, 0x01, 0x0a, 0x0b,
	0x47, 0x65, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x12, 0x34, 0x0a, 0x04, 0x75,
	0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x66, 0x6c, 0x79, 0x64,
	0x65, 0x76, 0x73, 0x5f, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x2e, 0x55, 0x75, 0x69, 0x64, 0x52, 0x04, 0x75, 0x75, 0x69,
	0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x62, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x62, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x44, 0x61,
	0x74, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x66, 0x74, 0x65, 0x72, 0x5f, 0x64, 0x61, 0x74, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x61, 0x66, 0x74, 0x65, 0x72, 0x44, 0x61, 0x74,
	0x65, 0x22, 0x1a, 0x0a, 0x04, 0x55, 0x75, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x75, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x75, 0x69, 0x64, 0x22, 0x3a, 0x0a,
	0x06, 0x53, 0x76, 0x72, 0x4d, 0x73, 0x67, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x75, 0x0a, 0x07, 0x55, 0x75, 0x69,
	0x64, 0x4d, 0x73, 0x67, 0x12, 0x34, 0x0a, 0x04, 0x75, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x20, 0x2e, 0x66, 0x6c, 0x79, 0x64, 0x65, 0x76, 0x73, 0x5f, 0x63, 0x68, 0x61,
	0x74, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x2e,
	0x55, 0x75, 0x69, 0x64, 0x52, 0x04, 0x75, 0x75, 0x69, 0x64, 0x12, 0x34, 0x0a, 0x03, 0x6d, 0x73,
	0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x66, 0x6c, 0x79, 0x64, 0x65, 0x76,
	0x73, 0x5f, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x69, 0x6e, 0x67, 0x2e, 0x53, 0x76, 0x72, 0x4d, 0x73, 0x67, 0x52, 0x03, 0x6d, 0x73, 0x67,
	0x32, 0x99, 0x07, 0x0a, 0x17, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x12, 0x65, 0x0a, 0x12,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x28, 0x2e, 0x66, 0x6c, 0x79, 0x64, 0x65, 0x76, 0x73, 0x5f, 0x63, 0x68, 0x61,
	0x74, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x2e,
	0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x23, 0x2e, 0x66,
	0x6c, 0x79, 0x64, 0x65, 0x76, 0x73, 0x5f, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x61, 0x70, 0x70, 0x5f,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x2e, 0x55, 0x75, 0x69, 0x64, 0x4d, 0x73,
	0x67, 0x22, 0x00, 0x12, 0x73, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72,
	0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x42, 0x79, 0x55, 0x73, 0x65, 0x72, 0x12, 0x20, 0x2e,
	0x66, 0x6c, 0x79, 0x64, 0x65, 0x76, 0x73, 0x5f, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x61, 0x70, 0x70,
	0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x2e, 0x55, 0x75, 0x69, 0x64, 0x1a,
	0x35, 0x2e, 0x66, 0x6c, 0x79, 0x64, 0x65, 0x76, 0x73, 0x5f, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x61,
	0x70, 0x70, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x2e, 0x41, 0x72, 0x72,
	0x61, 0x79, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x7c, 0x0a, 0x16, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x28, 0x2e, 0x66, 0x6c, 0x79, 0x64, 0x65, 0x76, 0x73, 0x5f, 0x63, 0x68, 0x61,
	0x74, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x2e,
	0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x36, 0x2e, 0x66,
	0x6c, 0x79, 0x64, 0x65, 0x76, 0x73, 0x5f, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x61, 0x70, 0x70, 0x5f,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x68, 0x0a, 0x0d, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x30, 0x2e, 0x66, 0x6c, 0x79, 0x64, 0x65, 0x76,
	0x73, 0x5f, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x69, 0x6e, 0x67, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x66, 0x6c, 0x79, 0x64,
	0x65, 0x76, 0x73, 0x5f, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x2e, 0x55, 0x75, 0x69, 0x64, 0x4d, 0x73, 0x67, 0x22, 0x00,
	0x12, 0x78, 0x0a, 0x19, 0x47, 0x65, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x42,
	0x79, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x27, 0x2e,
	0x66, 0x6c, 0x79, 0x64, 0x65, 0x76, 0x73, 0x5f, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x61, 0x70, 0x70,
	0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x2e, 0x47, 0x65, 0x74, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x1a, 0x30, 0x2e, 0x66, 0x6c, 0x79, 0x64, 0x65, 0x76, 0x73,
	0x5f, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x69, 0x6e, 0x67, 0x2e, 0x41, 0x72, 0x72, 0x61, 0x79, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x66, 0x0a, 0x0d, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x23, 0x2e, 0x66, 0x6c,
	0x79, 0x64, 0x65, 0x76, 0x73, 0x5f, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x1a, 0x2e, 0x2e, 0x66, 0x6c, 0x79, 0x64, 0x65, 0x76, 0x73, 0x5f, 0x63, 0x68, 0x61, 0x74, 0x5f,
	0x61, 0x70, 0x70, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x2e, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x4d, 0x73, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x12, 0x79, 0x0a, 0x16, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72,
	0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x39, 0x2e, 0x66,
	0x6c, 0x79, 0x64, 0x65, 0x76, 0x73, 0x5f, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x61, 0x70, 0x70, 0x5f,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x55, 0x73, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x66, 0x6c, 0x79, 0x64, 0x65, 0x76,
	0x73, 0x5f, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x69, 0x6e, 0x67, 0x2e, 0x53, 0x76, 0x72, 0x4d, 0x73, 0x67, 0x22, 0x00, 0x12, 0x5d, 0x0a,
	0x08, 0x4b, 0x69, 0x63, 0x6b, 0x55, 0x73, 0x65, 0x72, 0x12, 0x2b, 0x2e, 0x66, 0x6c, 0x79, 0x64,
	0x65, 0x76, 0x73, 0x5f, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x2e, 0x4b, 0x69, 0x63, 0x6b, 0x55, 0x73, 0x65, 0x72, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x66, 0x6c, 0x79, 0x64, 0x65, 0x76, 0x73,
	0x5f, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x69, 0x6e, 0x67, 0x2e, 0x53, 0x76, 0x72, 0x4d, 0x73, 0x67, 0x22, 0x00, 0x42, 0x44, 0x5a, 0x42,
	0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x66, 0x6c, 0x79, 0x64, 0x65,
	0x76, 0x73, 0x2f, 0x63, 0x68, 0x61, 0x74, 0x2d, 0x61, 0x70, 0x70, 0x2d, 0x61, 0x70, 0x69, 0x2f,
	0x72, 0x65, 0x73, 0x74, 0x2d, 0x61, 0x70, 0x69, 0x2f, 0x73, 0x72, 0x63, 0x2f, 0x63, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x73, 0x2f, 0x72, 0x70, 0x63, 0x2f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x69,
	0x6e, 0x67, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_src_clients_rpc_messaging_messaging_proto_rawDescOnce sync.Once
	file_src_clients_rpc_messaging_messaging_proto_rawDescData = file_src_clients_rpc_messaging_messaging_proto_rawDesc
)

func file_src_clients_rpc_messaging_messaging_proto_rawDescGZIP() []byte {
	file_src_clients_rpc_messaging_messaging_proto_rawDescOnce.Do(func() {
		file_src_clients_rpc_messaging_messaging_proto_rawDescData = protoimpl.X.CompressGZIP(file_src_clients_rpc_messaging_messaging_proto_rawDescData)
	})
	return file_src_clients_rpc_messaging_messaging_proto_rawDescData
}

var file_src_clients_rpc_messaging_messaging_proto_msgTypes = make([]protoimpl.MessageInfo, 15)
var file_src_clients_rpc_messaging_messaging_proto_goTypes = []interface{}{
	(*Conversation)(nil),                  // 0: flydevs_chat_app_messaging.Conversation
	(*UserConversation)(nil),              // 1: flydevs_chat_app_messaging.UserConversation
	(*ConversationAndParticipants)(nil),   // 2: flydevs_chat_app_messaging.ConversationAndParticipants
	(*UpdateConversationResponse)(nil),    // 3: flydevs_chat_app_messaging.UpdateConversationResponse
	(*ArrayConversationResponse)(nil),     // 4: flydevs_chat_app_messaging.ArrayConversationResponse
	(*CreateUserConversationRequest)(nil), // 5: flydevs_chat_app_messaging.CreateUserConversationRequest
	(*KickUserRequest)(nil),               // 6: flydevs_chat_app_messaging.KickUserRequest
	(*Message)(nil),                       // 7: flydevs_chat_app_messaging.Message
	(*CreateMessageRequest)(nil),          // 8: flydevs_chat_app_messaging.CreateMessageRequest
	(*MessageMsgResponse)(nil),            // 9: flydevs_chat_app_messaging.MessageMsgResponse
	(*ArrayMessageResponse)(nil),          // 10: flydevs_chat_app_messaging.ArrayMessageResponse
	(*GetMessages)(nil),                   // 11: flydevs_chat_app_messaging.GetMessages
	(*Uuid)(nil),                          // 12: flydevs_chat_app_messaging.Uuid
	(*SvrMsg)(nil),                        // 13: flydevs_chat_app_messaging.SvrMsg
	(*UuidMsg)(nil),                       // 14: flydevs_chat_app_messaging.UuidMsg
}
var file_src_clients_rpc_messaging_messaging_proto_depIdxs = []int32{
	12, // 0: flydevs_chat_app_messaging.Conversation.uuid:type_name -> flydevs_chat_app_messaging.Uuid
	7,  // 1: flydevs_chat_app_messaging.Conversation.last_msg:type_name -> flydevs_chat_app_messaging.Message
	12, // 2: flydevs_chat_app_messaging.UserConversation.uuid:type_name -> flydevs_chat_app_messaging.Uuid
	12, // 3: flydevs_chat_app_messaging.UserConversation.user_uuid:type_name -> flydevs_chat_app_messaging.Uuid
	12, // 4: flydevs_chat_app_messaging.UserConversation.last_access_uuid:type_name -> flydevs_chat_app_messaging.Uuid
	0,  // 5: flydevs_chat_app_messaging.ConversationAndParticipants.conversation:type_name -> flydevs_chat_app_messaging.Conversation
	1,  // 6: flydevs_chat_app_messaging.ConversationAndParticipants.user_conversation:type_name -> flydevs_chat_app_messaging.UserConversation
	1,  // 7: flydevs_chat_app_messaging.ConversationAndParticipants.participants:type_name -> flydevs_chat_app_messaging.UserConversation
	0,  // 8: flydevs_chat_app_messaging.UpdateConversationResponse.conversation:type_name -> flydevs_chat_app_messaging.Conversation
	13, // 9: flydevs_chat_app_messaging.UpdateConversationResponse.msg:type_name -> flydevs_chat_app_messaging.SvrMsg
	2,  // 10: flydevs_chat_app_messaging.ArrayConversationResponse.conversations:type_name -> flydevs_chat_app_messaging.ConversationAndParticipants
	13, // 11: flydevs_chat_app_messaging.ArrayConversationResponse.msg:type_name -> flydevs_chat_app_messaging.SvrMsg
	12, // 12: flydevs_chat_app_messaging.CreateUserConversationRequest.conversation_uuid:type_name -> flydevs_chat_app_messaging.Uuid
	1,  // 13: flydevs_chat_app_messaging.CreateUserConversationRequest.user_conversations:type_name -> flydevs_chat_app_messaging.UserConversation
	12, // 14: flydevs_chat_app_messaging.KickUserRequest.user_conversation:type_name -> flydevs_chat_app_messaging.Uuid
	12, // 15: flydevs_chat_app_messaging.KickUserRequest.conversation:type_name -> flydevs_chat_app_messaging.Uuid
	12, // 16: flydevs_chat_app_messaging.Message.uuid:type_name -> flydevs_chat_app_messaging.Uuid
	12, // 17: flydevs_chat_app_messaging.Message.conversation_uuid:type_name -> flydevs_chat_app_messaging.Uuid
	12, // 18: flydevs_chat_app_messaging.Message.author_uuid:type_name -> flydevs_chat_app_messaging.Uuid
	7,  // 19: flydevs_chat_app_messaging.CreateMessageRequest.message:type_name -> flydevs_chat_app_messaging.Message
	2,  // 20: flydevs_chat_app_messaging.CreateMessageRequest.new_convo:type_name -> flydevs_chat_app_messaging.ConversationAndParticipants
	7,  // 21: flydevs_chat_app_messaging.MessageMsgResponse.message:type_name -> flydevs_chat_app_messaging.Message
	13, // 22: flydevs_chat_app_messaging.MessageMsgResponse.msg:type_name -> flydevs_chat_app_messaging.SvrMsg
	7,  // 23: flydevs_chat_app_messaging.ArrayMessageResponse.message:type_name -> flydevs_chat_app_messaging.Message
	13, // 24: flydevs_chat_app_messaging.ArrayMessageResponse.msg:type_name -> flydevs_chat_app_messaging.SvrMsg
	12, // 25: flydevs_chat_app_messaging.GetMessages.uuid:type_name -> flydevs_chat_app_messaging.Uuid
	12, // 26: flydevs_chat_app_messaging.UuidMsg.uuid:type_name -> flydevs_chat_app_messaging.Uuid
	13, // 27: flydevs_chat_app_messaging.UuidMsg.msg:type_name -> flydevs_chat_app_messaging.SvrMsg
	0,  // 28: flydevs_chat_app_messaging.MessagingProtoInterface.CreateConversation:input_type -> flydevs_chat_app_messaging.Conversation
	12, // 29: flydevs_chat_app_messaging.MessagingProtoInterface.GetConversationsByUser:input_type -> flydevs_chat_app_messaging.Uuid
	0,  // 30: flydevs_chat_app_messaging.MessagingProtoInterface.UpdateConversationInfo:input_type -> flydevs_chat_app_messaging.Conversation
	8,  // 31: flydevs_chat_app_messaging.MessagingProtoInterface.CreateMessage:input_type -> flydevs_chat_app_messaging.CreateMessageRequest
	11, // 32: flydevs_chat_app_messaging.MessagingProtoInterface.GetMessagesByConversation:input_type -> flydevs_chat_app_messaging.GetMessages
	7,  // 33: flydevs_chat_app_messaging.MessagingProtoInterface.UpdateMessage:input_type -> flydevs_chat_app_messaging.Message
	5,  // 34: flydevs_chat_app_messaging.MessagingProtoInterface.CreateUserConversation:input_type -> flydevs_chat_app_messaging.CreateUserConversationRequest
	6,  // 35: flydevs_chat_app_messaging.MessagingProtoInterface.KickUser:input_type -> flydevs_chat_app_messaging.KickUserRequest
	14, // 36: flydevs_chat_app_messaging.MessagingProtoInterface.CreateConversation:output_type -> flydevs_chat_app_messaging.UuidMsg
	4,  // 37: flydevs_chat_app_messaging.MessagingProtoInterface.GetConversationsByUser:output_type -> flydevs_chat_app_messaging.ArrayConversationResponse
	3,  // 38: flydevs_chat_app_messaging.MessagingProtoInterface.UpdateConversationInfo:output_type -> flydevs_chat_app_messaging.UpdateConversationResponse
	14, // 39: flydevs_chat_app_messaging.MessagingProtoInterface.CreateMessage:output_type -> flydevs_chat_app_messaging.UuidMsg
	10, // 40: flydevs_chat_app_messaging.MessagingProtoInterface.GetMessagesByConversation:output_type -> flydevs_chat_app_messaging.ArrayMessageResponse
	9,  // 41: flydevs_chat_app_messaging.MessagingProtoInterface.UpdateMessage:output_type -> flydevs_chat_app_messaging.MessageMsgResponse
	13, // 42: flydevs_chat_app_messaging.MessagingProtoInterface.CreateUserConversation:output_type -> flydevs_chat_app_messaging.SvrMsg
	13, // 43: flydevs_chat_app_messaging.MessagingProtoInterface.KickUser:output_type -> flydevs_chat_app_messaging.SvrMsg
	36, // [36:44] is the sub-list for method output_type
	28, // [28:36] is the sub-list for method input_type
	28, // [28:28] is the sub-list for extension type_name
	28, // [28:28] is the sub-list for extension extendee
	0,  // [0:28] is the sub-list for field type_name
}

func init() { file_src_clients_rpc_messaging_messaging_proto_init() }
func file_src_clients_rpc_messaging_messaging_proto_init() {
	if File_src_clients_rpc_messaging_messaging_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_src_clients_rpc_messaging_messaging_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Conversation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_src_clients_rpc_messaging_messaging_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserConversation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_src_clients_rpc_messaging_messaging_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConversationAndParticipants); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_src_clients_rpc_messaging_messaging_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateConversationResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_src_clients_rpc_messaging_messaging_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ArrayConversationResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_src_clients_rpc_messaging_messaging_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateUserConversationRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_src_clients_rpc_messaging_messaging_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KickUserRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_src_clients_rpc_messaging_messaging_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Message); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_src_clients_rpc_messaging_messaging_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateMessageRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_src_clients_rpc_messaging_messaging_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MessageMsgResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_src_clients_rpc_messaging_messaging_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ArrayMessageResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_src_clients_rpc_messaging_messaging_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetMessages); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_src_clients_rpc_messaging_messaging_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Uuid); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_src_clients_rpc_messaging_messaging_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SvrMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_src_clients_rpc_messaging_messaging_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UuidMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_src_clients_rpc_messaging_messaging_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   15,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_src_clients_rpc_messaging_messaging_proto_goTypes,
		DependencyIndexes: file_src_clients_rpc_messaging_messaging_proto_depIdxs,
		MessageInfos:      file_src_clients_rpc_messaging_messaging_proto_msgTypes,
	}.Build()
	File_src_clients_rpc_messaging_messaging_proto = out.File
	file_src_clients_rpc_messaging_messaging_proto_rawDesc = nil
	file_src_clients_rpc_messaging_messaging_proto_goTypes = nil
	file_src_clients_rpc_messaging_messaging_proto_depIdxs = nil
}
